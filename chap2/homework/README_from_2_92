In the following problems, you will write code to implement floating-point functions,
operating directly on bit-level representations of floatin-point numbers. Your code
should exactly replicate the convention for IEEE floating-point operations, including
using round-to-even mode when rounding is required.

To this end, we define data type float_bits to be equivalent to unsigned:

/* Access but-level representation floating-point number */
typedef unsigned float_bits;

Rather than using data type float in your code, you will use float_bits.
You may use both int and unsigned data types, including usigned and integer
constants and operations. You may not use any unions, structs, or arrays.
Most significantly, you may not use any floating-point data types, operations,
or constants. Instead, your code should perform the bit manipulations that im-
plement the specified floating-point operations.

The following function illustrates the use of these coding rules. For argument f,
it returns +-0 if f is denormalized (preserving the sign of f.), and returns f otherwise.

float_bits float_denorm_zero(float_bits f) {
	unsigned sign = f >> 31;
	unsigned exp = f >> 23 & 0xff;
	unsigned frac = f & 0x7fffff;
	if (exp == 0)
		frac = 0;
	return (sign << 31) | (exp << 23) | frac;
}

	
