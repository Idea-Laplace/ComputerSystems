This guideline begins to be applied to problems from 2_61.

	In several of the following(Prob. 2.61) problems, we will artificially restrict
what programming construct you can use to help you gain a better understanding of the
bit-level, logic, and arithmetic operations of C. In answering these problems, your
code must follow these rules:

Assumption:
1. Integers are represented in two's complement form.
2. Right shifts of signed data are performed arithmetically.
3. Data type int is w bits long, For some of the problems, you will be given a specific
   value for w, but otherwise your code should work as long as w is a multiple of 8.
   You can use the expression 'sizeof(int) << 3' to compute w.

Forbidden:
1. Conditionals (if, ?:), loops, switch statement, function calls, and macro invocations.
2. Division, modulus and multiplication.
3. Relative comparison operators(<, >, <=, >=).

Allowed:
1. All bit-level and logic operations.
2. Left and right shifts, but only with shift amounts between 0 and w-1.
3. Addition and subtraction.
4. Equality(==) and inequality(!=) tests. (Some of the problems do not allow these.)
5. Integer constants INT_MIN, INT_MAX.
6. Casting between data types int and unsigned, either explicitly or implicitly.

Even with these rules, you should try to make your code readably by choosing descriptive
variable names and using comments to describe the logic behind your solutions. As an ex-
ample, the following code exrtracts the MSB from integer argument x:

// Get MSB from x
int get_msb(int x) {
	// Shift  by w-8
	int shift_val = (sizeof(int) - 1) << 8;
	// Arithmetic shift
	int xright = x >> shift_val;

	// Zero all but LSB
	return xright & 0xFF;
}
