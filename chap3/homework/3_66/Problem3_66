Consider the following source code, where NR adn NC are macro expressions
declared with #define that computes the dimensions of array A in terms of
parameter n. This code computes the sum of the elements of column j of the
array.

long sum_col(long n, long A[NR(n)][NC(n)], long j) {
	long i;
	long result = 0;
	for (i = 0; i < NR(n); i++)
		result += A[i][j];
	return result;
}

In compiling this program, GCC generates the following assembly code:

sum_col:
	leaq	1(, %rdi, 4), %r8     
	leaq	(%rdi, %rdi, 2), %rax
	movq	%rax, %rdi
	testq	%rax, %rax
	jle		.L4
	salq	$3, %r8
	leaq	(%rsi, %rdx, 8), %rcx
	movl	$0, %eax
	movl	$0, %edx
.L3:
	addq	(%rcx), %rax
	addq	$1, %rdx
	addq	%r8, %rcx
	cmpq	%rdi, %rdx
	jne		.L3
	rep; ret
.L4
	movl	$0, %eax
	ret

Use your reverse engineering skills to determine the definition of NR and NC.

sol)

sum_col:
	leaq	1(, %rdi, 4), %r8     		// %r8 = 4n + 1
	leaq	(%rdi, %rdi, 2), %rax		// %rax = 3n
	movq	%rax, %rdi					// n *= 3;
	testq	%rax, %rax					// if (n == 0)
	jle		.L4							// return 0;
	salq	$3, %r8						// %r8 = 32n + 8 --- byte width of one row.
	leaq	(%rsi, %rdx, 8), %rcx		// %rcx = A + 8j, &A[0][j], initial position.
	movl	$0, %eax					// result = 0; initialized result.
	movl	$0, %edx					// i = 0; initialized row_index.
.L3:
	addq	(%rcx), %rax				// result += A[i][j];
	addq	$1, %rdx					// i++;
	addq	%r8, %rcx					// (current address) += 8(4n + 1), 8 * (number of columns)
	cmpq	%rdi, %rdx					// compare i and 3n  ---- (Number of rows)
	jne		.L3
	rep; ret
.L4
	movl	$0, %eax
	ret


Hence,

#define NR(n) (3 * (n))
#define NC(n) (4 * (n) + 1)
