The code the follows shows an example of branching on an enumerated type value
in a switch statement. Recall that enumerated types in C are simply a way to
introduce a set of names having associated integer values. By default, the values
assigned to the names count from zero upward. In our code, the actions associated
with the different case labels have been omitted.


long switch3(long *p1, long *p2, mode_t action) {
	long result = 0;

	switch(action) {
	case MODE_A:

	case MODE_B:

	case MODE_C:

	case MODE_D:

	case MODE_E:

	default:
	}

	return result;
}

The part of the generated assembly code implementing the different actions is
shown in Fugure 3.52(below). The annotations indicates the argument locations,
the register values, and the case labels for the different jump destinations.

Fill in the missing parts of the C code. It contained one case that fell through
to another-try to reconstruct this.

// MODE_D fell through to MODE_E.
Figure 3.52
.L8:						MODE_E
	movl	$27, %eax
	ret
.L3:						MODE_A
	movq	(%rsi), %rax
	movq	(%rdi), %rdx
	movq	%rdx, (%rsi)
	ret
.L5:						MODE_B
	movq	(%rdi), %rax
	addq	(%rsi), %rax
	movq	%rax, (%rdi)
	ret
.L6:						MODE_C
	movq	$59, (%rdi)
	movq	(%rsi), %rax
	ret
.L7:						MODE_D
	movq	(%rsi), %rax
	movq	%rax, (%rdi)
	movl	$27, %eax
	ret
.L9:						default
	movl	$12, %eax
	ret

