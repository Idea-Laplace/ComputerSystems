A function test_two has the following overall structure:

short test_two(unsigned short x) {
	short val = 0;
	short i;
	for (___; ___; ___) {
		.
		.
		.
	}
	return val;
}

The GCC C compiler generates the following assembly code:


// It seems to be confusion here, so I revised overall code in reference to the solution.

test_two:
	movl	$16, %edx
	movl	$0, %eax
.L10:
	movq	%rdi, %rcx
	andl	$1, %ecx
	addq	%rax, %rax
	orq		%rcx, %rax
	shrq	%rdi
	subq	$1, %rdx
	jne		.L10
	rep; ret

Reverse engineer the operation of this code and then do the following:

A. Use the assembly code version to fill in the missing parts of the C code.
B. Explain why there is neither an intial test before the loop nor an initial
   jump to the test portion of the loop.

   Ans) The initial value is 16, surely nonzero, the condition of which test expression examines
   So there is no need to add guarded-do or jump-to-middle statements.

C. Describe in English what this function computes.
	This function returns the value having bit pattern of x in reverse order.


