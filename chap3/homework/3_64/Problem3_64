Consider the following source code, where R, S, and T are constants
declared with #define:

long A[R][S][T];

long store_ele(long i, long j, long k, long *dest) {
	*dest = A[i][j][k];
	return sizeof(A);
}

In compiling this program, GCC generates the following asembly code:

store_ele:
	leaq	(%rsi, %rsi, 2), %rax
	leaq	(%rsi, %rax, 4), %rax
	movq	%rdi, %rsi
	salq	$6, %rsi
	addq	%rsi, %rdi
	addq	%rax, %rdi
	addq	%rdi, %rdx
	movq	A(, %rdx, 8), %rax
	movq	%rax, (%rcx)
	movl	$3640, %eax
	ret


A. Extend Equation 3.1 from two dimensions to three to provide a formula for
   the location of array element A[i][j][k].

   Address for A[i][j][k]: A + L(T(S*i + j) + k), where L denotes the size of the primitive data,
   												  in this case L = 8, the size of long for x84-64.

B. Use your reverse engineering skills to determine the values of R, S, and T
   based on the assembly code.

   -------------------------------
	leaq	(%rsi, %rsi, 2), %rax
	leaq	(%rsi, %rax, 4), %rax
   -------------------------------
	%rax: 13*j.

   -------------------------------
	movq	%rdi, %rsi
	salq	$6, %rsi
	addq	%rsi, %rdi
	addq	%rax, %rdi
	addq	%rdi, %rdx
   -------------------------------
   %rdx: 5*13*i + 13*j + k

   -------------------------------
	movq	A(, %rdx, 8), %rax
   -------------------------------
   %rax: A + 8*(13*(5*i + j) + k)

   -------------------------------
	movq	%rax, (%rcx)
   -------------------------------
   *dest = *(A + 8*(13*(5*i + j) + k)) = A[i][j][k];

   -------------------------------
	movl	$3640, %eax
   -------------------------------
   sizeof(A) is 3640 = R * S * T * 8 = R * 5 * 13 * 8
   R = 3640 / 520 = 7 


   Hence,

   R: 7
   S: 5
   T: 13
