The C code

int test(data_t a) {
	return a TEST 0;
}

shows a general comparison between arguement a and 0, where we can set the
data type of the argument by declaring data_t with a typedef, and the nature
of the comparison by declaring TEST with a #define declaration. The following
instruction sequences implement the comparison, where a is held in some portion
of register %rdi. For each sequence, determine which data types data_t and which
comparisons TEST could cause the compiler to generate this code. (There can be
multiple correc answers; list all correct ones.)

A.	testq	%rdi, %rdi
	setge	%al

	a & a is a itself, which could update ZF and SF, setting OF to 0.
	Actually, a - 0 is just a, which could be represented as compq $0, %rdi,
   	equivalent to testq %rdi, %rdi
	TEST: >=
	'a' should be of type long (the sizeof(long) is 8 here, of course.)

B.	testw	%di, %di
	sete	%al
	TEST: ==
	'a' should be any data types having 16-bit size, such as short or usigned short.

C.	testb	%dil, %dil
	seta	%al
	TEST:	>
	'a' should be of unsigned char type.

D.	testl	%edi, %edi
	setle 	%al
	TEST:	<=
	'a' should be of type int, eqivalent to int32_t

