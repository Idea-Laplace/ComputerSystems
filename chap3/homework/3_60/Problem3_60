Consider the following assembly code:

loop:
	movl	%esi, %ecx
	movl	$1, %edx
	movl	$0, %eax
	jmp		.L2
.L3
	movq	%rdi, %r8
	andq	%rdx, %r8
	orq		%r8, %rax
	salq	%cl, %rdx
.L2
	testq	%rdx, %rdx
	jne		.L3
	rep; ret

The preceding code was generated by compiling C code that had the following
overall form:

long loop(long x, long n) {
	long result = ;
	long mask;
	for (mask = ; mask ; mask = ) {
		result |= ;
	}
	return result;
}

Your task is to fill in the missing parts of the C code to get a program
equivalent to the generated assembly code. Recall that the result of the 
function is returned in register %rax. You will find it helpful to examine
the assembly code before, during and after the llop to form a consistent
mapping between the register and the program variables.

A. Which registers hold program values x, n, result, and mask?
x: %rdi
n: %rsi
result: %rax
mask: %rdx

B. What are the initial values of result and mask?
mask = 1;

C. What is the test condition for mask?
mask != 0;

D. How does mask get updated?
mask = mask << n;

E. How does result get updated?
result |= x & mask;

F. Fill in all the missing parts of the C code.
