The functions intlen, len, and iptoa provide a very convoluted way to compute
the number of deciaml digits required to represent an integer. We will use this
as a way to study some aspects of the GCC stack protector facility.

int len(char *s) {
	return strlen(s);
}

void iptoa(char *s, long *p) {
	long val = *p;
	sprintf(s, "%ld", val);
}

int intlen(long x) {
	long v;
	char buf[12];
	v = x;
	iptoa(buf, &v);
	return len(buf);
}

The following show portions of the code for intlen, compiled both
with and without stack pointer.

(a) Without protector
intlen:
	subq	$40, %rsp
	movq	%rdi, 24(%rsp)
	leaq	24(%rsp), %rsi
	movq	%rsp, %rdi
	call	iptoa

(b) With protector
intlen:
	subq	$56, %rsp
	movq	%fs:40, %rax
	movq	%rdi, 40(%rsp)
	xorl	%eax, %eax
	movq	%rdi, 8(%rsp)
	leaq	8(%rsp), %rsi
	movq	16(%rsp), %rdi
	call	iptoa

A. For both versions: What are the positions in the stack frame for buf, v, and
	(when present) the canary value?

	(a)										| 	(b)	
											|
	------------------------				|	------------------------
	Return address							|	Return address
	47                    40				|	63                    56
	========================				|	========================
											|
	39				      32				|	55                    48
	------------------------				|	------------------------
    [      Value of v      ]				|	Canary Value
	31                    24				|	47                    40
	------------------------				|	------------------------
											|
	23                    16				|	39				      32
	------------------------				|	------------------------
	          [11][10][9][8]				|	          [11][10][9][8]
	15                     8				|	31                    24
	------------------------				|	------------------------
	[7][6][5][4][3][2][1][0]	<---%rsp	|	[7][6][5][4][3][2][1][0]
	7                      0				|	23                    16
	------------------------				|	------------------------
											|   [      Value of v      ]
											|	15                     8
											|	------------------------
											|	7                      0	<---%rsp
											|	------------------------

*************************************************************************************

B. How does the rearranged ordering of the local variables in the protected code
	provide greater security against a buffer overrun attack?


	Even when the buffer overflow occurs, the value of v would not be corrupted since
	the address of v, which would have followed that of string buffer in (a), precedes
	that of string buffer in (b).
