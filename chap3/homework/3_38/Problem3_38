Consider the following source code, where M and N are constants declared with
#define:

long P[M][N];
long Q[N][M];

long sum_element(long i, long j) {
	return P[i][j] + Q[j][i];
}

In compiling this program, GCC generates the following code:

sum_element:
	leaq	0(, %rdi, 8), %rdx
	subq	%rdi, %rdx
	addq	%rsi, %rdx
	leaq	(%rsi, %rsi, 4), %rax
	addq	%rax, %rdi
	movq	Q(, %rdi, 8), %rax
	addq	P(, %rdx, 8), %rax

Use your reverse engineering skills to determine the values of M and N
based on this assembly code.

sol)
sum_element:
	leaq	0(, %rdi, 8), %rdx			// 8 * i
	subq	%rdi, %rdx					// %rdx = 7 * i
	addq	%rsi, %rdx					// %rdx = 7 * i + j
	leaq	(%rsi, %rsi, 4), %rax		// 5 * j  
	addq	%rax, %rdi					// %rdi = i + 5 * j
	movq	Q(, %rdi, 8), %rax			// Q[5 * j + i] = Q[j][i], M = 5
	addq	P(, %rdx, 8), %rax			// P[7 * i + j] = P[i][j], N = 7

Hence, M = 5, N = 7

