The C code 

int comp(data_t a, data_t b) {
	return a COMP b;
}

shows a general comparison between arguments a and b, where data_t, the data
type of the arguments, is defined (via typedef) to be one of the integer data
types listed in Figure 3.1 and either signed or unsigned. The comparison COMP
is defined via #define.

Suppose 'a' is in some portion of %rdi while 'b' is in some portion of %rsi.
For each of the following instruction sequences, determine which data types 
data_t and which comparison COMP could cause the compiler to generate this code.
(There can be multiple  correct answers; you should list them all.)

A.	cmpl	%esi, %edi
	setl	%al

	a < b
	'a' and 'b' should be types equivalent to int32_t
	COMP: < lower than

B.	cmpw	%si, %di
	setge	%al

	a >= b 
	'a' and 'b' should be of type short, or equivalent to int16_t
	COMP: >= greater than or equal to.
	In terms of synonym, not less is also possible, however, this expression
	would not be encoded via #define, the form of which is !(a < b)

C.	cmpb	%sil, %dil
	setbe	%al

	a <= b 
	'a' and 'b' should be of type 'unsigned char'
	COMP: <=

D.	cmpq	%rsi, %rdi
	setne	%al

	a != b 
	'a' and 'b' should be of type int64_t or equivalent to it,
	as long as its bit size are 64-bit long, such as long, unsigned long, any pointer types.
	COMP: !=

