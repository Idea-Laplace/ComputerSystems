An x86-64 central processing unit (CPU) contains set of:

1. 16 general-purpose registers, storing 64-bit values.
These registers are used to store integer data as well as
pointers.

63                              31              15      7      0
----------------------------------------------------------------
%rax                            |%eax           |%ax    |%al      : return value
%rbx                            |%ebx           |%bx    |%bl      : Callee saved
%rcx                            |%ecx           |%cx    |%cl      : 4th argument
%rdx                            |%edx           |%dx    |%dl      : 3rd argument

%rsi                            |%esi           |%si    |%sil     : 2nd argument
%rdi                            |%edi           |%di    |%dil     : 1st argument

%rbp                            |%ebp           |%bp    |%bpl     : Callee saved
%rsp                            |%esp           |%sp    |%spl     : stack pointer

%r8                             |%r8d           |%r8w   |%r8b     : 5th argument
%r9                             |%r9d           |%r9w   |%r9b     : 6th argument
%r10                            |%r10d          |%r10w  |%r10b    : Caller saved
%r11                            |%r11d          |%r11w  |%r11b    : Caller saved
%r12                            |%r12d          |%r12w  |%r12b    : Callee saved 
%r13                            |%r13d          |%r13w  |%r13b    : Callee saved
%r14                            |%r14d          |%r14w  |%r14b    : Callee saved
%r15                            |%r15d          |%r15w  |%r15b    : Callee saved

Their names all begin with '%r', but otherwise follow multiple different naming conventions,
owing to the historical evolution of the instruction set. The original 8086 had eight 16-bit
registers, shown in the above figure as registers %ax through bp. Each had a specific purpose,
and hence they were given names that reflected how they were to be used. With the extension to
IA32, these registers are expanded to 32-bit registers, labeled %eax through %ebp, In the extension
to x86-64, the original eight new register were added, labeled %rax through %rbp. In addition,
eight new registers were added, and these were given labels according to a new naming convention,
%r8 through %r15.

As the annotation along the right-hand side of the above figure indicate, different registers
serve different roles in typical programs. Most unique among them is the stack pointer, %rsp,
used to indicate the end position in the 'run-time stack'. Some instructions specifically read
and write this register. The other 15 registers have more flexibility in their uses. A small 
number of instructions make specific use of certain registers. More importantly, a set of 
standard programming conventions governs how the registers are to be used for managing the stack
arguments, returning values form functions, and storing local and temporary data.

Examples:
%rax: returns value OR lower 64-bit of oct words when computing imulq or mulq
%rdx: stores the 3rd argument of a process OR upper 64-bit of oct words when computing imulq or mulq
%cl : stores shifting value, say, stores n for x << n;

type function (x, y, z)
	x(first argument)----%rdi
	y(second argument)----%rsi
	z(thrid argument)----%rdx


