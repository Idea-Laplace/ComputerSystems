	Many computer systems place restrictions on the allowable addresses for the
primitive data types, requiring that the address for some objects must be a
multiple of some value, say, K(typically 2, 4, or 8). Such alignment restr-
ictions simplify the design of the hardware forming the interface between the
processor and the memory system. For example, suppose a processor always fetches
8 bytes from memory with an address that must be a multiple of 8. If we can
guarantee that any double will be aligned to have its address be a multiple of 8,
then the value can be read or written with a single memory operation. Otherwise,
we may need to perform two memory access, since the object might be split across
two 8-byte memory blocks.
	The x86-64 hardware will work correctly regardless of the alignment of data.
However, Intel recommends that data be aligned to improve memory system performance.
Their alignment rule is based on the principle that any primitive object K bytes
must have an address that that is a multiple of K. We can seee that this rule leads
to the following alignments:

K	Types
------------------------
1	char
2	short
4	int, float
8	long, double, char *
------------------------

	Alignment si enforced by making sure that every data type is organized and
allocated in such a way that every object within the type satisfies its 
alignment restrictions. The compiler places directives in the assembly code
indicating the desired alignment for global data. For example, the assembly
code declaration of the jump table on page 271 contains the following dire-
ctive on line 2:

.align 8

	This ensures that the data following it(in this case the start of the jump
table) will start with an address that is a multiple of 8. Since each table
entry is 8-byte long, the successive elements will obey the 8-byte alignment
restriction.

	For code involving structuresm the compiler may need to insert gaps in the
field allocation to ensure that each structure element satisfies its alignment
requirement. The structure will then have some required alignment for its starting
address.

For 'internal' elements, their padding bytes are determined by their next element,
while the last padding bytes are determined by the largest alignment requirement 
in a given structure, The trailing padding attached to the last element should be
exist for the case of contagious structs. If and only if the address of structure
are multiple of the largest alignment requirement of its element, the alignment
requirement could be achived.

